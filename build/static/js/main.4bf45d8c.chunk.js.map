{"version":3,"sources":["assets/textures/2_no_clouds_4k.jpeg","assets/textures/displacementMap.jpg","assets/textures/fair_clouds_4k.png","assets/textures/normalMap.jpeg","assets/textures/water_4k.png","assets/textures/nightMap.jpeg","assets/textures/galaxyStarfield.png","components/earth/Earth.js","App.js","reportWebVitals.js","index.js"],"names":["Earth","props","useLoader","TextureLoader","EarthNightMap","EarthDayMap","EarthNormalMap","EarthSpecularMap","EarthCloudsMap","EarthDisplacementMap","colorMap","specularMap","cloudsMap","displacementMap","earthRef","useRef","cloudsRef","useState","useFrame","elapsedTime","clock","getElapsedTime","current","rotation","y","Stars","radius","depth","count","factor","saturation","fade","ref","args","map","transparent","OrbitControls","minDistance","maxDistance","zoomSpeed","panSpeed","rotateSpeed","bumpMap","bumpScale","App","color","position","intensity","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAAe,MAA0B,4CCA1B,MAA0B,4CCA1B,MAA0B,2CCA1B,MAA0B,uCCA1B,MAA0B,qCCA1B,MAA0B,sC,GCA1B,I,OCYA,SAASA,EAAMC,GAC1B,MAAiFC,YAAUC,gBAAe,CAACC,EAAeC,EAAaC,EAAgBC,EAAkBC,EAAgBC,IAAzL,mBAAiBC,GAAjB,WAAsCC,GAAtC,WAAmDC,EAAnD,KAA8DC,EAA9D,KAEMC,EAAWC,mBACXC,EAAYD,mBAElB,EAAwBE,mBAAS,GAAjC,6BASA,OAPAC,aAAS,YAAgB,IACfC,EADc,EAAZC,MACkBC,iBAE1BP,EAASQ,QAAQC,SAASC,EAAIL,EAAc,GAC5CH,EAAUM,QAAQC,SAASC,EAAIL,EAAc,MAI7C,qCACI,cAACM,EAAA,EAAD,CACIC,OAAQ,IACRC,MAAO,GACPC,MAAO,IACPC,OAAQ,EACRC,WAAY,EACZC,MAAM,IAMV,uBAAMC,IAAKhB,EAAX,UACI,gCAAgBiB,KAAM,CAAC,MAAO,IAAK,OACnC,mCACIC,IAAKtB,EACLuB,aAAa,OAGrB,uBAAMH,IAAKlB,EAAX,UACI,cAACsB,EAAA,EAAD,CACIC,YAAa,IACbC,YAAa,GACbC,UAAW,EACXC,SAAU,GACVC,YAAa,KAEjB,sCAAsBR,KAAM,CAAC,EAAG,IAAK,OACrC,mCACIC,IAAKxB,EACLgC,QAAS7B,EACTF,YAAaA,EACbgC,UAAW,UCzChBC,MAdf,WAGE,OACE,eAAC,IAAD,WACE,kCAAkBC,MAAM,WAAWC,SAAU,CAAC,EAAG,EAAG,GAAIC,UAAW,IACnE,cAAC,WAAD,CAAUC,SAAU,KAApB,SAEE,cAAChD,EAAD,UCFOiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4bf45d8c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/2_no_clouds_4k.db0f72d2.jpeg\";","export default __webpack_public_path__ + \"static/media/displacementMap.9db8a9b1.jpg\";","export default __webpack_public_path__ + \"static/media/fair_clouds_4k.67a542cb.png\";","export default __webpack_public_path__ + \"static/media/normalMap.930cf2e9.jpeg\";","export default __webpack_public_path__ + \"static/media/water_4k.e532694e.png\";","export default __webpack_public_path__ + \"static/media/nightMap.c0e138e9.jpeg\";","export default __webpack_public_path__ + \"static/media/galaxyStarfield.6376a942.png\";","import { OrbitControls, Stars } from '@react-three/drei';\nimport { useFrame, useLoader } from '@react-three/fiber';\nimport { React, useRef, Suspense, useState } from 'react';\nimport { Color, DoubleSide, TextureLoader } from 'three';\nimport EarthDayMap from '../../assets/textures/2_no_clouds_4k.jpeg';\nimport EarthDisplacementMap from '../../assets/textures/displacementMap.jpg';\nimport EarthCloudsMap from '../../assets/textures/fair_clouds_4k.png';\nimport EarthNormalMap from '../../assets/textures/normalMap.jpeg';\nimport EarthSpecularMap from '../../assets/textures/water_4k.png';\nimport EarthNightMap from '../../assets/textures/nightMap.jpeg';\nimport Galaxy from '../galaxy/Galaxy';\n\nexport default function Earth(props) {\n    const [nightMap, colorMap, normalMap, specularMap, cloudsMap, displacementMap] = useLoader(TextureLoader, [EarthNightMap, EarthDayMap, EarthNormalMap, EarthSpecularMap, EarthCloudsMap, EarthDisplacementMap]);\n\n    const earthRef = useRef();\n    const cloudsRef = useRef();\n\n    const [zoom, setZoom] = useState(3);\n\n    useFrame(({ clock }) => {\n        const elapsedTime = clock.getElapsedTime();\n\n        earthRef.current.rotation.y = elapsedTime / 40;\n        cloudsRef.current.rotation.y = elapsedTime / 33;\n    });\n\n    return (\n        <>\n            <Stars\n                radius={100}\n                depth={60}\n                count={20000}\n                factor={7}\n                saturation={0}\n                fade={true}\n            />\n\n            {/* <Suspense fallback={null}>\n                <Galaxy />\n            </Suspense> */}\n            <mesh ref={cloudsRef}>\n                <sphereGeometry args={[1.006, 512, 512]} />\n                <meshPhongMaterial\n                    map={cloudsMap}\n                    transparent={true}\n                />\n            </mesh>\n            <mesh ref={earthRef}>\n                <OrbitControls\n                    minDistance={1.4}\n                    maxDistance={20}\n                    zoomSpeed={1}\n                    panSpeed={0.5}\n                    rotateSpeed={0.4}\n                />\n                <sphereBufferGeometry args={[1, 512, 512]} />\n                <meshPhongMaterial\n                    map={colorMap}\n                    bumpMap={displacementMap}\n                    specularMap={specularMap}\n                    bumpScale={1}\n                />\n                {/* <meshStandardMaterial\n                    normalMap={normalMap}\n                    displacementMap={displacementMap}\n                    displacementScale={0.02}\n                    displacementBias={0.2}\n                    metalness={0.4}\n                    roughness={0.7}\n                /> */}\n            </mesh>\n        </>\n    );\n}","import { Canvas } from '@react-three/fiber';\nimport { Suspense } from 'react';\nimport './App.css';\nimport Earth from './components/earth/Earth';\n\n\nfunction App() {\n\n\n  return (\n    <Canvas>\n      <directionalLight color=\"0xffffff\" position={[5, 3, 5]} intensity={1} />\n      <Suspense fallback={null}>\n        {/* <ambientLight color=\"0x333333\" intensity={0.05} /> */}\n        <Earth />\n      </Suspense>\n    </Canvas>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}